{"version":3,"sources":["logo.svg","components/LoginComponent.js","components/TableComponent.js","components/FormComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginComponent","state","data","fetch","then","result","json","setState","this","map","entry","index","key","React","Component","TableComponent","props","characterData","removeCharacter","className","rows","row","name","job","onClick","FormComponent","handleChange","event","target","value","submitForm","handleSubmit","initialState","console","log","htmlFor","type","onChange","App","characters","filter","i","character","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29b9b556.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport Button from \"react-bootstrap/esm/Button\";\n\nexport class LoginComponent extends React.Component {\n\n    state = {\n        data: [],\n    }\n\n    componentDidMount() {\n        const url =\n            'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*'\n\n        fetch(url)\n            .then(result => result.json())\n            .then(result => {\n                this.setState({\n                    data: result,\n                })\n            })\n    }\n\n    render() {\n\n        const {data} = this.state\n\n        const result = data.map((entry, index) => {\n            return <li key={index}>{entry}</li>\n        })\n        return <ul>{result}</ul>\n    }\n}\n","import React, {Component} from 'react';\n\nexport class TableComponent extends Component {\n\n    render() {\n\n        const { characterData, removeCharacter } = this.props\n\n        const TableHeader = () => {\n            return (\n                <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Job</th>\n                    <th>Remove</th>\n                </tr>\n                </thead>\n            )\n        }\n\n        const TableBody = (props) => {\n            const rows = props.characterData.map((row, index) => {\n                return (\n                    <tr key={index}>\n                        <td>{row.name}</td>\n                        <td>{row.job}</td>\n                        <td>\n                            <button className=\"btn btn-info\" onClick={() => props.removeCharacter(index)}>Delete</button>\n                        </td>\n                    </tr>\n                )\n            })\n\n            return (\n                <tbody>{rows}</tbody>\n            )\n\n        }\n\n        return (\n            <table className=\"table\">\n                <TableHeader/>\n                <TableBody characterData={characterData} removeCharacter={removeCharacter}/>\n            </table>\n        )\n\n\n    }\n}\n","import React, {Component} from 'react'\n\n\nexport class FormComponent extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.initialState = {\n            name: '',\n            job: '',\n        }\n\n        this.state = this.initialState\n    }\n\n    handleChange = (event) => {\n        const {name, value} = event.target\n\n        this.setState({\n                [name]: value,\n            }\n        );\n    }\n\n    submitForm = () => {\n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n        console.log(\"state: \" + this.state);\n        console.log(\"initialState: \" + this.initialState);\n    }\n\n    render() {\n\n        const {name, job} = this.state;\n        return (\n            <form>\n                <label htmlFor=\"name\">Name:</label>\n                <input className=\"input-group\" type=\"text\" name=\"name\" value={name} onChange={this.handleChange}/>\n\n                <label htmlFor=\"job\">Job:</label>\n                <input className=\"input-group\" type=\"text\" name=\"job\" value={job} onChange={this.handleChange}/>\n\n                <label> </label>\n                <input className=\"btn btn-info\" type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n            </form>\n        )\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport {LoginComponent} from \"./components/LoginComponent\";\nimport {TableComponent} from \"./components/TableComponent\";\nimport {FormComponent} from \"./components/FormComponent\";\n\nimport './index.css'\n\n\n\nclass App extends React.Component {\n\n    state = {\n        characters: [\n            {\n                name: 'Charlie',\n                job: 'Janitor',\n            },\n            {\n                name: 'Mac',\n                job: 'Bouncer',\n            },\n            {\n                name: 'Dee',\n                job: 'Aspring actress',\n            },\n            {\n                name: 'Dennis',\n                job: 'Bartender',\n            },\n        ],\n    }\n\n    render() {\n\n        const {characters} = this.state;\n        return (\n            <div className=\"container\">\n                <TableComponent characterData = {characters} removeCharacter={this.removeCharacter} />\n                <FormComponent handleSubmit={this.handleSubmit} />\n                <LoginComponent></LoginComponent>\n            </div>\n        );\n    }\n\n    removeCharacter = (index) => {\n        const {characters} = this.state;\n\n        this.setState({\n            characters: characters.filter((characters, i) => {\n                return  i !== index\n            }),\n        })\n    }\n\n    handleSubmit = (character) => {\n        this.setState({characters: [...this.state.characters, character]});\n    }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}